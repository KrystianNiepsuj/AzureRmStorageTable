steps:

- task: AzureKeyVault@1
  displayName: 'Azure Key Vault: AdminPassword'
  inputs:
    azureSubscription: azure-connection
    KeyVaultName: pmckeyvault03
    SecretsFilter: 'SpPassword'

- task: PowerShell@
  displayName: "Run pester"
  inputs:
    scriptType: inlineScript
    inlineScript: |
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

      Write-Verbose -Verbose "Getting pipeline variables"
      $Location = "$(Parameters.Location)"
      $SpName = "$(Parameters.SpName)"
      $TenantId = "$(Parameters.TenantId)"
      $Passowrd = "$(SpPassword)"

      Write-Verbose -Verbose "Installing modules"
      Install-Module -Name Pester -AllowClobber -Force -Scope CurrentUser
      Install-module Az.Storage -MinimumVersion 1.1.0 -AllowClobber -Force -Scope CurrentUser
      Install-module Az.Resources -MinimumVersion 1.2.1 -AllowClobber -Force -Scope CurrentUser

      Write-Verbose -Verbose "Importing modules"
      Import-Module Pester
      Import-Module Az.Accounts
      Import-Module Az.Storage
      Import-Module Az.Resources

      Write-Verbose -Verbose "Authenticating"
      $Credential = New-Object System.Management.Automation.PSCredential ($SpName, $SpPassword)
      Connect-AzAccount -ServicePrincipal -Credential $Credential -TenantId $tenantId

      #$SubscriptionId = (Get-AzureRmContext).SubscriptionId

      Set-Location "$(Build.Repository.LocalPath)"
      $outputFile = ".\TEST-RESULTS.xml"
      #Invoke-Pester -OutputFile $outputFile -OutputFormat NUnitXml @{Path="./Tests";Parameters=@{SubscriptionId=$SubscriptionId;Location=$Location}}

- task: PublishTestResults@1
  displayName: Publish Test Results
  inputs:
    testRunTitle: Test Results for Pester
    buildPlatform: Windows
    testRunner: NUnit
    testResultsFiles: ./TEST-RESULTS.xml
    failTaskOnFailedTests: true
