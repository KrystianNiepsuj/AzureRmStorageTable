pool:
  vmImage: vs2017-win2016
  demands: azureps

steps:
- task: AzurePowerShell@1
  displayName: "Run pester"
  inputs:
    azureSubscription: pmarques-azure-connection
    ScriptType: InlineScript
    ConnectedServiceNameSelector: ConnectedServiceNameARM
    ConnectedServiceNameARM: pmarques-azure-connection
    Inline: |
      #Install-PackageProvider -Name NuGet -Force -Scope CurrentUser
      Install-Module -Name Pester -Force -Verbose -Scope CurrentUser
      Import-Module Pester
      try
      {
          $endpoint = Get-VstsEndpoint -Name $serviceName -Require
          if (!$endpoint)
          {
              throw "Endpoint not found..."
          }

          $subscriptionId = $endpoint.Data.SubscriptionId
          $tenantId = $endpoint.Auth.Parameters.TenantId
          $servicePrincipalId = $endpoint.Auth.Parameters.servicePrincipalId
          $servicePrincipalKey = $endpoint.Auth.Parameters.servicePrincipalKey

          $spnKey = ConvertTo-SecureString $servicePrincipalKey -AsPlainText -Force
          $credentials = New-Object System.Management.Automation.PSCredential($servicePrincipalId,$spnKey)

          Add-AzureRmAccount -ServicePrincipal -TenantId $tenantId -Credential $credentials
          Select-AzureRmSubscription -SubscriptionId $subscriptionId -Tenant $tenantId

          $ctx = Get-AzureRmContext
          Write-Host "Connected to subscription '$($ctx.Subscription)' and tenant '$($ctx.Tenant)'..."
      }
      catch
      {
          Write-Host "Authentication failed: $($_.Exception.Message)..." 
      }

      $Location = "$(Parameters.Location)"
      $SubscriptionId = (Get-AzureRmContext).Subscription.id
      write-host "Location: $Location"
      write-host "Subscription: $SubscriptionId"
       #$outputFile = ".\TEST-RESULTS.xml"
      #Invoke-Pester -OutputFile $outputFile -OutputFormat NUnitXml @{Path="./Tests";Parameters=@{SubscriptionId=$SubscriptionId;Location=$Location}  
    azurePowerShellVersion: LatestVersion

- task: PublishTestResults@2
  displayName: Publish Test Results
  inputs:
    testRunTitle: Test Results for Pester
    buildPlatform: Windows
    testRunner: NUnit
    testResultsFiles: ./TEST-RESULTS.xml
    failTaskOnFailedTests: true
